/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package  countlatancy.task;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.samza.config.Config;
import org.apache.samza.system.IncomingMessageEnvelope;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.InitableTask;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.StreamTask;
import org.apache.samza.task.TaskContext;
import org.apache.samza.task.TaskCoordinator;
import org.apache.samza.task.WindowableTask;

public class Benchmark implements StreamTask,InitableTask{
    // Map<String,Integer> clickEvent = new HashMap<String,Integer>();
    // Map<String,Integer> clickCount = new HashMap<String,Integer>();
    //private Map<String, Integer> counts = new HashMap<String, Integer>();
    private static String TOPIC_NAME = "benchmark";

    private static SystemStream output_stream = new SystemStream("kafka",TOPIC_NAME);

    public void process(IncomingMessageEnvelope envelope, MessageCollector collector,TaskCoordinator coodinator) throws Exception {
        System.out.println(envelope.getMessage());
        //Map<String, Object> Object = (Map<String, Object>) envelope.getMessage();
        Map<String, Object> counts = new HashMap<String, Object>();
        Object msg = envelope.getMessage();
        //System.out.println(msg.value());
        counts.put("string", msg);
        System.out.println(counts);
        collector.send(new OutgoingMessageEnvelope(output_stream, msg));
        String HLINE = "-------------------------------------------------------------\n";
        System.out.println(HLINE);
        System.out.println("STREAM Benchmark Test");
        System.out.println(HLINE);
        //ArrayList<Object> a = new ArrayList<Object>();
        //ArrayList<Object> b = new ArrayList<Object>();
        //ArrayList<Object> c = new ArrayList<Object>();
        int STREAM_ARRAY_SIZE = 1000000;
        double[] a = new double[STREAM_ARRAY_SIZE];
        double[] b = new double[STREAM_ARRAY_SIZE];
        double[] c = new double[STREAM_ARRAY_SIZE];
        for (int i = 0; i < STREAM_ARRAY_SIZE; i ++) {
            //a.add(1.0);
            //b.add(2.0);
            //c.add(0.0);
            a[i] = 1.0;
            b[i] = 2.0;
            c[i] = 0.0;
        }
        long t = System.currentTimeMillis();
        for (int i = 0; i < STREAM_ARRAY_SIZE; i ++) {
            //a.set(i, (double)a.get(i)*2.0E0);
            a[i] = a[i]*2.0E0;
        }
        t = System.currentTimeMillis() - t;
        System.out.println("Each test below will take on the order of " + t + "microseconds");
    }

    public void init(Config config, TaskContext task){
        System.out.println("----------------------------------------------------------------");
        System.out.println("hhhhhhhhhhhhhhhhhhhhhhhhhhhhh");
        System.out.println("----------------------------------------------------------------");

    }
}
